@import '~bulma/sass/utilities/initial-variables';
@import '~bulma/sass/utilities/functions';

@import './vars.scss';

//
// Customize bulma
//
$black: #343434;
@import '~bulma';
@import "../../node_modules/bulma-extensions/bulma-checkradio/dist/css/bulma-checkradio.sass";

//
// Helpers
//

// SPACING CSS - see usage: https://github.com/jgthms/bulma/issues/451#issuecomment-331758839
$sizeUnit: rem;
$marginKey: 'm';
$paddingKey: 'p';
$separator: '-';
$sizes: (
    ('none', 0),
    ('xxs', 0.125),
    ('xs', 0.25),
    ('sm', 0.5),
    ('md', 1),
    ('lg', 2),
    ('xl', 4),
    ('xxl', 8),
);
$positions: (
    ('t', 'top'),
    ('r', 'right'),
    ('b', 'bottom'),
    ('l', 'left')
);

@function sizeValue($key, $value) {
    @return if($key == 'none', 0, $value + $sizeUnit);
}

@each $size in $sizes {
    $sizeKey: nth($size, 1);
    $sizeValue: nth($size, 2);
    .#{$marginKey}#{$separator}#{$sizeKey} {
        margin: sizeValue($sizeKey, $sizeValue) !important;
    }
    .#{$paddingKey}#{$separator}#{$sizeKey} {
        padding: sizeValue($sizeKey, $sizeValue) !important;
    }
    @each $position in $positions {
        $posKey: nth($position, 1);
        $posValue: nth($position, 2);
        .#{$marginKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            margin-#{$posValue}: sizeValue($sizeKey, $sizeValue) !important;
        }
        .#{$paddingKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            padding-#{$posValue}: sizeValue($sizeKey, $sizeValue) !important;
        }
    }
}

//
// Global styles
//

html {
  height: 100%;
}
body, #__nuxt, #__layout {
  min-height: 100vh;
}
.navbar-item {
  text-transform: uppercase;
}
.super-button {
  span {
    font-size: 0.8em;
    font-weight: bold;
    margin-right: 15px;
  }
  i {
    font-size: 0.7em;
    border-radius: 50%;
    padding: 9px;
    width: 30px;
  }
  &.is-primary{
    box-shadow: 1px 3px 12px 3px rgba($blue, 0.30);
    i { background: darken($blue, 15%); }
  }
  &.is-dark {
    box-shadow: 1px 3px 12px 3px rgba(0,0,0,0.30);
    i { background: darken($grey, 15%); }
  }
}
.has-corners {
  border-radius: 4px;
}
.sidebar {
  height: 100vh;
  width: 260px;
  transition: all 0.3s;
  overflow: auto;
  overflow-x: hidden;
  .navbar {
    border-bottom: 1px solid $light-grey;
    width: 100%;
    .navbar-item {
      margin-left: auto;
      margin-right: auto;
      &:hover {
        background: none;
      }
    }
  }
  .menu {
    p { // headers
      padding: 20px 20px 0 20px;
    }
    a { //links
      padding: 12px 20px;
      margin: 8px 10px;
      text-transform: uppercase;
      font-size: 0.9rem;
      border-radius: 0;
      &.is-active, &:hover {
        // background: rgba( $blue, 0.05 );
        // border-right: 2px solid $primary;
        color: #000;
        background: #fff;
        border-radius: 5px;
        box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.05);
      }
      &.is-active {
        // color: #fff;
        color: $blue;
        background: #fff;
        // background: $blue;
        // box-shadow: 0px 0px 6px 3px rgba(0, 0, 0, 0.08)
        // box-shadow: 0px 0px 10px 2px rgba($blue, 0.30);
      }
    }
  }
}
.main {
  margin: 20px;
}

// Animations
.fade-enter-active, .fade-leave-active {
  transition: opacity .5s;
}
.fade-enter, .fade-leave-to {
  opacity: 0;
}

//
// Animations
//

.shake-enter-active, .shake-leave-active {
  animation: shake 0.6s cubic-bezier(.36,.07,.19,.97) both;
  transform: translate3d(0, 0, 0);
}
.shake-enter, .shake-leave-to {
  animation: shake 0.6s cubic-bezier(.36,.07,.19,.97) both;
  transform: translate3d(0, 0, 0);
}
@keyframes shake {
  10%, 90% { transform: translate3d(-1px, 0, 0); }
  20%, 80% { transform: translate3d(2px, 0, 0); }
  30%, 50%, 70% {  transform: translate3d(-4px, 0, 0); }
  40%, 60% { transform: translate3d(4px, 0, 0); }
}
